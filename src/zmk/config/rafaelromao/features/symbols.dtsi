/*
*
* Copyright (c) 2022 Rafael Rom√£o
* SPDX-License-Identifier: MIT
*
*/

/ {
    #define SYMBOL(NAME, SYMBOLS) \
        NAME: NAME { \
            compatible = "zmk,behavior-macro"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <0>; \
            wait-ms = <0>; \
            tap-ms = <0>; \
            bindings = <&macro_tap SYMBOLS>; \
        };

    #define SHIFTED_SYMBOL(NAME, UNSHIFTED, SHIFTED) \
        NAME: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <0>; \
            bindings = <UNSHIFTED>, <SHIFTED>; \
            mods = <(MOD_LSFT|MOD_RSFT)>; \
        };

    #define TAPHOLD_SYMBOL(NAME, TAP, HOLD) \
         NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <2>; \
            tapping-term-ms = <TAPPING_TERM>; \
            flavor = "tap-preferred"; \
            quick-tap-ms = <QUICK_TAP_TERM>; \
            global-quick-tap; \
            bindings = <HOLD>, <TAP>; \
        };

    #define MODTAP_SYMBOL(NAME, BINDINGS) \
         NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <2>; \
            tapping-term-ms = <TAPPING_TERM>; \
            flavor = "tap-preferred"; \
            quick-tap-ms = <QUICK_TAP_TERM>; \
            global-quick-tap; \
            bindings = <&kp>, <BINDINGS>; \
        };

    #define TAPDANCE_SYMBOL(NAME, TAPHOLD, DTAP, TTAP) \
         NAME: NAME { \
            compatible = "zmk,behavior-tap-dance"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <0>; \
            tapping-term-ms = <TD_TAPPING_TERM>; \
            bindings = <TAPHOLD>, <DTAP>, <TTAP>; \
        };
    
    #define LAYERTAP_SYMBOL(NAME, BINDINGS) \
         NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <2>; \
            tapping-term-ms = <TAPPING_TERM>; \
            flavor = "tap-preferred"; \
            quick-tap-ms = <QUICK_TAP_TERM>; \
            global-quick-tap; \
            bindings = <&mo>, <BINDINGS>; \
        };

    symbols {

        // Romak

        SYMBOL(mc_semi,           &kp SEMI)
        SYMBOL(mc_end_semi,       &kp END &kp SEMI)
        SYMBOL(mc_end_semi_ent,   &kp END &kp SEMI &kp ENTER)
        TAPHOLD_SYMBOL(th_semi,   &mc_semi, &mc_end_semi)

        SYMBOL(mc_dot,            &kp DOT)
        SYMBOL(mc_end_dot,        &kp END &kp DOT)
        TAPHOLD_SYMBOL(th_dot,    &mc_dot, &mc_end_dot)

        SYMBOL(mc_comma,          &kp COMMA)
        SYMBOL(mc_end_comma,      &kp END &kp COMMA)
        TAPHOLD_SYMBOL(th_comma,  &mc_comma, &mc_end_comma)
        TAPDANCE_SYMBOL(td_comma, &th_comma 0 0, &leader, &none)

        // Lower

        SHIFTED_SYMBOL(mc_n0,     &kp N0, &kp KP_N0)
        SHIFTED_SYMBOL(mc_n1,     &kp N1, &kp KP_N1)
        SHIFTED_SYMBOL(mc_n2,     &kp N2, &kp KP_N2)
        SHIFTED_SYMBOL(mc_n3,     &kp N3, &kp KP_N3)
        SHIFTED_SYMBOL(mc_n4,     &kp N4, &kp KP_N4)
        SHIFTED_SYMBOL(mc_n5,     &kp N5, &kp KP_N5)
        SHIFTED_SYMBOL(mc_n6,     &kp N6, &kp KP_N6)
        SHIFTED_SYMBOL(mc_n7,     &kp N7, &kp KP_N7)
        SHIFTED_SYMBOL(mc_n8,     &kp N8, &kp KP_N8)
        SHIFTED_SYMBOL(mc_n9,     &kp N9, &kp KP_N9)

        LAYERTAP_SYMBOL(th_n0,    &mc_n0)
        MODTAP_SYMBOL(th_n1,      &mc_n1)
        MODTAP_SYMBOL(th_n4,      &mc_n4)
        MODTAP_SYMBOL(th_n5,      &mc_n5)
        MODTAP_SYMBOL(th_n6,      &mc_n6)

        SYMBOL(mc_bti,            &kp GRAVE &kp SPACE)
        LAYERTAP_SYMBOL(th_bti,   &mc_bti)

        SYMBOL(mc_tilde,          &kp TILDE &kp SPACE)
        SYMBOL(mc_caret,          &kp CARET &kp SPACE)

        SYMBOL(mc_and,            &kp AMPS &kp AMPS)
        SYMBOL(mc_or,             &kp PIPE &kp PIPE)
        SHIFTED_SYMBOL(mm_and,    &mc_and, &kp AMPS)
        SHIFTED_SYMBOL(mm_or,     &mc_or,  &kp PIPE)
        TAPHOLD_SYMBOL(th_and,    &mm_and,  &mm_or)

        SYMBOL(mc_lpar,           &kp LPAR)
        SYMBOL(mc_end_lpar,       &kp END &kp LPAR)
        TAPHOLD_SYMBOL(th_lpar,   &mc_lpar, &mc_end_lpar)

        SYMBOL(mc_rpar,           &kp RPAR)
        SYMBOL(mc_end_rpar,       &kp END &kp RPAR)
        TAPHOLD_SYMBOL(th_rpar,   &mc_rpar, &mc_end_rpar)
        
        SYMBOL(mc_pars,           &kp LPAR &kp RPAR)
        SYMBOL(mc_end_pars,       &kp END &kp LPAR &kp RPAR)
        TAPHOLD_SYMBOL(th_pars,   &mc_pars, &mc_end_pars)

        SYMBOL(mc_lbkt,           &kp LBKT)
        SYMBOL(mc_end_lbkt,       &kp END &kp LBKT)
        TAPHOLD_SYMBOL(th_lbkt,   &mc_lbkt, &mc_end_lbkt)

        SYMBOL(mc_rbkt,           &kp RBKT)
        SYMBOL(mc_end_rbkt,       &kp END &kp RBKT)
        TAPHOLD_SYMBOL(th_rbkt,   &mc_rbkt, &mc_end_rbkt)

        SYMBOL(mc_qmark,           &kp QMARK)
        SYMBOL(mc_end_qmark,       &kp END &kp QMARK)
        TAPHOLD_SYMBOL(th_qmark,   &mc_qmark, &mc_end_qmark)

        SYMBOL(mc_dqo,             &kp DQT &kp SPACE)
        SYMBOL(mc_double_dqo,      &mc_dqo &mc_dqo &kp LEFT)
        TAPHOLD_SYMBOL(th_dqo,     &mc_dqo, &mc_double_dqo)

        SYMBOL(mc_sqo,             &kp SQT &kp SPACE)
        SYMBOL(mc_double_sqo,      &mc_sqo &mc_sqo &kp LEFT)
        TAPHOLD_SYMBOL(th_sqo,     &mc_sqo, &mc_double_sqo)

        // Raise

        SYMBOL(mc_lbrc,            &kp LBRC)
        SYMBOL(mc_end_lbrc,        &kp END &kp LBRC)
        TAPHOLD_SYMBOL(th_lbrc,    &mc_lbrc, &mc_end_lbrc)

        SYMBOL(mc_rbrc,            &kp RBRC)
        SYMBOL(mc_end_rbrc,        &kp END &kp RBRC)
        TAPHOLD_SYMBOL(th_rbrc,    &mc_rbrc, &mc_end_rbrc)
        
        SYMBOL(mc_braces,          &kp END &kp LBRC &kp RBRC &kp LEFT &kp ENTER)

        SYMBOL(mc_dollar,          &kp DOLLAR)
        SYMBOL(mc_euro,            &kp LS(LA(N2)))
        SYMBOL(mc_pound,           &kp LA(N3))
        TAPDANCE_SYMBOL(td_curr,   &mc_dollar, &mc_euro, &mc_pound)

        SYMBOL(mc_colon,           &kp COLON)
        SYMBOL(mc_end_colon,       &kp END &kp COLON)
        TAPHOLD_SYMBOL(th_colon,   &mc_colon, &mc_end_colon)

        SYMBOL(mc_excl,            &kp EXCL)
        SYMBOL(mc_end_excl,        &kp END &kp EXCL)
        TAPHOLD_SYMBOL(th_excl,    &mc_excl, &mc_end_excl)

        SYMBOL(mc_perc,            &kp PERCENT)
        SYMBOL(mc_degree,          &kp LS(LA(N8)))
        TAPHOLD_SYMBOL(th_perc,    &mc_perc, &mc_degree)

        SYMBOL(mc_slash,           &kp SLASH)
        SYMBOL(mc_backslash,       &kp BACKSLASH)
        TAPHOLD_SYMBOL(th_slash,   &mc_slash, &mc_backslash)

        SYMBOL(mc_end_ent,         &kp END &kp ENTER)
        SYMBOL(mc_down_end,        &kp DOWN &kp END)
        TAPHOLD_SYMBOL(th_end_ent, &mc_end_ent, &mc_down_end)
        
        // Accents

        SYMBOL(mc_ao,              &ac_atil &kp O)
        SYMBOL(mc_oes,             &ac_otil &kp E &kp S)
        SYMBOL(mc_cao,             &ac_ccdi &ac_atil &macro_wait_time 10 &macro_tap &kp O)
        SYMBOL(mc_coes,            &ac_ccdi &ac_otil &macro_wait_time 10 &macro_tap &kp E &kp S)
    };
};
