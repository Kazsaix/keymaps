/*
*
* Copyright (c) 2022 Rafael Rom√£o
* SPDX-License-Identifier: MIT
*
*/

/ {
    #define SYMBOL(NAME, SYMBOLS) \
        NAME: NAME { \
            compatible = "zmk,behavior-macro"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <0>; \
            wait-ms = <0>; \
            tap-ms = <0>; \
            bindings = <&macro_tap SYMBOLS>; \
        };

    #define SHIFTED_SYMBOL(NAME, UNSHIFTED, SHIFTED) \
        NAME: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <0>; \
            bindings = <UNSHIFTED>, <SHIFTED>; \
            mods = <(MOD_LSFT|MOD_RSFT)>; \
        };

    #define TAPHOLD_SYMBOL(NAME, TAP, HOLD) \
         NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <2>; \
            tapping-term-ms = <TAPPING_TERM>; \
            flavor = "tap-preferred"; \
            quick-tap-ms = <QUICK_TAP_TERM>; \
            global-quick-tap; \
            bindings = <HOLD>, <TAP>; \
        };

    #define MODTAP_SYMBOL(NAME, BINDINGS) \
         NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <2>; \
            tapping-term-ms = <TAPPING_TERM>; \
            flavor = "tap-preferred"; \
            quick-tap-ms = <QUICK_TAP_TERM>; \
            global-quick-tap; \
            bindings = <&kp>, <BINDINGS>; \
        };

    #define LAYERTAP_SYMBOL(NAME, BINDINGS) \
         NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <2>; \
            tapping-term-ms = <TAPPING_TERM>; \
            flavor = "tap-preferred"; \
            quick-tap-ms = <QUICK_TAP_TERM>; \
            global-quick-tap; \
            bindings = <&mo>, <BINDINGS>; \
        };

    #define MACRO_SYMBOL(NAME, SYMBOLS) \
        NAME: NAME { \
			compatible = "zmk,behavior-macro"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <0>; \
            wait-ms = <10>; \
            tap-ms = <10>; \
            bindings = <&macro_tap SYMBOLS>; \
        };

    #define TAPDANCE_SYMBOL(NAME, TAPHOLD, DTAP, TTAP) \
         NAME: NAME { \
            compatible = "zmk,behavior-tap-dance"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <0>; \
            tapping-term-ms = <TD_TAPPING_TERM>; \
            bindings = <TAPHOLD>, <DTAP>, <TTAP>; \
        };
    
    symbols {

        // Romak

        SHIFTED_SYMBOL(mm_semi,    &kp SEMI, &kp COLON)
        SYMBOL(mc_end_semi,        &kp END &kp SEMI)
        SYMBOL(mc_end_semi_ent,    &kp END &kp SEMI &kp ENTER)
        TAPHOLD_SYMBOL(th_semi,    &mm_semi, &mc_end_semi)
                                   
        SHIFTED_SYMBOL(mm_unds,    &kp UNDERSCORE, &kp MINUS)
                                   
        SYMBOL(mc_dot,             &kp DOT)
        SYMBOL(mc_end_dot,         &kp END &kp DOT)
        TAPHOLD_SYMBOL(th_dot,     &mc_dot, &mc_end_dot)
                                   
        SYMBOL(mc_comma,           &kp COMMA)
        SYMBOL(mc_end_comma,       &kp END &kp COMMA)
        TAPHOLD_SYMBOL(th_comma,   &mc_comma, &mc_end_comma)
        TAPDANCE_SYMBOL(td_comma,  &th_comma 0 0, &leader, &none)
                                   
        // Lower                  
                                   
        SHIFTED_SYMBOL(mc_n0,      &kp N0, &kp KP_N0)
        SHIFTED_SYMBOL(mc_n1,      &kp N1, &kp KP_N1)
        SHIFTED_SYMBOL(mc_n2,      &kp N2, &kp KP_N2)
        SHIFTED_SYMBOL(mc_n3,      &kp N3, &kp KP_N3)
        SHIFTED_SYMBOL(mc_n4,      &kp N4, &kp KP_N4)
        SHIFTED_SYMBOL(mc_n5,      &kp N5, &kp KP_N5)
        SHIFTED_SYMBOL(mc_n6,      &kp N6, &kp KP_N6)
        SHIFTED_SYMBOL(mc_n7,      &kp N7, &kp KP_N7)
        SHIFTED_SYMBOL(mc_n8,      &kp N8, &kp KP_N8)
        SHIFTED_SYMBOL(mc_n9,      &kp N9, &kp KP_N9)
                                  
        LAYERTAP_SYMBOL(th_n0,     &mc_n0)
        MODTAP_SYMBOL(th_n1,       &mc_n1)
        MODTAP_SYMBOL(th_n4,       &mc_n4)
        MODTAP_SYMBOL(th_n5,       &mc_n5)
        MODTAP_SYMBOL(th_n6,       &mc_n6)
                                 
        SYMBOL(mc_lpar,            &kp LPAR)
        SYMBOL(mc_end_lpar,        &kp END &kp LPAR)
        TAPHOLD_SYMBOL(th_lpar,    &mc_lpar, &mc_end_lpar)
                                 
        MACRO_SYMBOL(mc_for,       &kp F &kp O &kp R &kp LPAR)
        MACRO_SYMBOL(mc_while,     &kp W &kp H &kp I &kp L &kp E &kp LPAR)
        TAPDANCE_SYMBOL(td_lpar,   &th_lpar 0 0, &mc_for, &mc_while)
                                 
        SYMBOL(mc_rpar,            &kp RPAR)
        SYMBOL(mc_end_rpar,        &kp END &kp RPAR)
        TAPHOLD_SYMBOL(th_rpar,    &mc_rpar, &mc_end_rpar)
                                 
        MACRO_SYMBOL(mc_if,        &kp I &kp F &kp LPAR)
        MACRO_SYMBOL(mc_else,      &kp E &kp L &kp S &kp E &kp SPACE)
        TAPDANCE_SYMBOL(td_rpar,   &th_rpar 0 0, &mc_if, &mc_else)
        
        SYMBOL(mc_pars,            &kp LPAR &kp RPAR)
        SYMBOL(mc_end_pars,        &kp END &kp LPAR &kp RPAR)
        TAPHOLD_SYMBOL(th_pars,    &mc_pars, &mc_end_pars)

        SYMBOL(mc_caret,           &kp CARET &kp SPACE)

        SYMBOL(mc_bti,             &kp GRAVE &kp SPACE)
        LAYERTAP_SYMBOL(th_bti,    &mc_bti)

        SYMBOL(mc_dqo,             &kp DQT &kp SPACE)
        SYMBOL(mc_double_dqo,      &mc_dqo &mc_dqo &kp LEFT)
        TAPHOLD_SYMBOL(th_dqo,     &mc_dqo, &mc_double_dqo)
                                 
        MACRO_SYMBOL(mc_void,      &kp V &kp O &kp I &kp D &kp SPACE)
        MACRO_SYMBOL(mc_null,      &kp N &kp U &kp L &kp L)
        TAPDANCE_SYMBOL(td_dqo,    &th_dqo 0 0, &mc_void, &mc_null)
                                 
        SYMBOL(mc_sqo,             &kp SQT &kp SPACE)
        SYMBOL(mc_double_sqo,      &mc_sqo &mc_sqo &kp LEFT)
        TAPHOLD_SYMBOL(th_sqo,     &mc_sqo, &mc_double_sqo)
                                 
        MACRO_SYMBOL(mc_string,    &kp S &kp T &kp R &kp I &kp N &kp G &kp SPACE)
        MACRO_SYMBOL(mc_boolean,   &kp B &kp O &kp O &kp L &kp E &kp A &kp N &kp SPACE)
        TAPDANCE_SYMBOL(td_sqo,    &th_sqo 0 0, &mc_string, &mc_boolean)
                                 
        SYMBOL(mc_lbkt,            &kp LBKT)
        SYMBOL(mc_end_lbkt,        &kp END &kp LBKT)
        TAPHOLD_SYMBOL(th_lbkt,    &mc_lbkt, &mc_end_lbkt)
                                 
        MACRO_SYMBOL(mc_float,      &kp F &kp L &kp O &kp A &kp T &kp SPACE)
        MACRO_SYMBOL(mc_double,    &kp D &kp O &kp U &kp B &kp L &kp E &kp SPACE)
        TAPDANCE_SYMBOL(td_lbkt,   &th_lbkt 0 0, &mc_float, &mc_double)
                                 
        SYMBOL(mc_rbkt,            &kp RBKT)
        SYMBOL(mc_end_rbkt,        &kp END &kp RBKT)
        TAPHOLD_SYMBOL(th_rbkt,    &mc_rbkt, &mc_end_rbkt)
                                 
        MACRO_SYMBOL(mc_short,     &kp S &kp H &kp O &kp R &kp T &kp SPACE)
        MACRO_SYMBOL(mc_long,      &kp L &kp O &kp N &kp G &kp SPACE)
        TAPDANCE_SYMBOL(td_rbkt,   &th_rbkt 0 0, &mc_short, &mc_long)

        SYMBOL(mc_qmark,           &kp QMARK)
        SYMBOL(mc_end_qmark,       &kp END &kp QMARK)
        TAPHOLD_SYMBOL(th_qmark,   &mc_qmark, &mc_end_qmark)

        SYMBOL(mc_and,             &kp AMPS)
        SYMBOL(mc_right_and,       &kp RIGHT &kp AMPS &kp AMPS)
        TAPHOLD_SYMBOL(th_and,     &mc_and, &mc_right_and)

        SYMBOL(mc_or,              &kp PIPE)
        SYMBOL(mc_right_or,        &kp RIGHT &kp PIPE &kp PIPE)
        TAPHOLD_SYMBOL(th_or,      &mc_or, &mc_right_or)

        SYMBOL(mc_tilde,           &kp TILDE &kp SPACE)
                                  
        // Raise

        SYMBOL(mc_lbrc,            &kp LBRC)
        SYMBOL(mc_end_lbrc,        &kp END &kp LBRC)
        TAPHOLD_SYMBOL(th_lbrc,    &mc_lbrc, &mc_end_lbrc)
                                 
        MACRO_SYMBOL(mc_var,       &kp V &kp A &kp R &kp SPACE)
        MACRO_SYMBOL(mc_final,     &kp F &kp I &kp N &kp A &kp L &kp SPACE)
        TAPDANCE_SYMBOL(td_lbrc,   &th_lbrc 0 0, &mc_var, &mc_final)

        SYMBOL(mc_rbrc,            &kp RBRC)
        SYMBOL(mc_end_rbrc,        &kp END &kp RBRC)
        TAPHOLD_SYMBOL(th_rbrc,    &mc_rbrc, &mc_end_rbrc)
                                 
        MACRO_SYMBOL(mc_case,      &kp C &kp A &kp S &kp E &kp SPACE)
        MACRO_SYMBOL(mc_switch,    &kp S &kp W &kp I &kp T &kp C &kp H &kp LPAR)
        TAPDANCE_SYMBOL(td_rbrc,   &th_rbrc 0 0, &mc_case, &mc_switch)
        
        SYMBOL(mc_braces,          &kp END &kp LBRC &kp RBRC &kp LEFT &kp ENTER)

        SYMBOL(mc_dollar,          &kp DOLLAR)
        SYMBOL(mc_euro,            &kp LS(LA(N2)))
        SYMBOL(mc_pound,           &kp LA(N3))
        SYMBOL(mc_caret,           &kp CARET &kp SPACE)
        TAPDANCE_SYMBOL(td_curr,   &mc_dollar, &mc_euro, &mc_pound)
        TAPHOLD_SYMBOL(th_curr,    &td_curr, &mc_caret)

        SYMBOL(mc_colon,           &kp COLON)
        SYMBOL(mc_end_colon,       &kp END &kp COLON)
        TAPHOLD_SYMBOL(th_colon,   &mc_colon, &mc_end_colon)

        SYMBOL(mc_excl,            &kp EXCL)
        SYMBOL(mc_end_excl,        &kp END &kp EXCL)
        TAPHOLD_SYMBOL(th_excl,    &mc_excl, &mc_end_excl)
                                 
        MACRO_SYMBOL(mc_return,    &kp R &kp E &kp T &kp U &kp R &kp N &kp SPACE)
        MACRO_SYMBOL(mc_throw,     &kp T &kp H &kp R &kp O &kp W &kp SPACE)
        TAPDANCE_SYMBOL(td_excl,   &th_excl 0 0, &mc_return, &mc_throw)

        SYMBOL(mc_eql,             &kp EQUAL)
        SYMBOL(mc_end_eql,         &kp END &kp EQUAL)
        TAPHOLD_SYMBOL(th_eql,     &mc_eql, &mc_end_eql)
                                 
        SYMBOL(mc_lt,              &kp LT)
        SYMBOL(mc_end_lt,          &kp END &kp LT)
        TAPHOLD_SYMBOL(th_lt,      &mc_lt, &mc_end_lt)
                                 
        SYMBOL(mc_gt,              &kp GT)
        SYMBOL(mc_end_gt,          &kp END &kp GT)
        TAPHOLD_SYMBOL(th_gt,      &mc_gt, &mc_end_gt)
                                 
        SYMBOL(mc_perc,            &kp PERCENT)
        SYMBOL(mc_deg,             &kp LS(LA(N8)))
        TAPHOLD_SYMBOL(th_perc,    &mc_perc, &mc_deg)
        
        SYMBOL(mc_slash,           &kp SLASH)
        SYMBOL(mc_bslash,          &kp BACKSLASH)
        SHIFTED_SYMBOL(mm_bslash,  &mc_bslash, &mc_end_qmark)
        TAPHOLD_SYMBOL(th_slash,   &mc_slash, &mm_bslash)

        SYMBOL(mc_end_ent,         &kp END &kp ENTER)
        SYMBOL(mc_down_end,        &kp DOWN &kp END)
        TAPHOLD_SYMBOL(th_end_ent, &mc_end_ent, &mc_down_end)
    };
};
